//import * as PIXI from 'pixi.js';
import * as PIXI from 'https://cdn.jsdelivr.net/npm/pixi.js@7.3.3/dist/pixi.min.js';
import { getAnalyser } from './audioManager';
import { PROFILES } from './frequencyProfiles';
import { AdaptiveSensitivity } from './adaptiveSensitivity.js';

// –î–µ–ª–∞–µ–º PIXI –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º
window.PIXI = PIXI;
console.log('üì¶ PixiJS version:', PIXI.VERSION);

let app; // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ PIXI
let spotlights = []; // –º–∞—Å—Å–∏–≤ –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–æ–≤
let currentBands = PROFILES.DEFAULT; // –ß–∞—Å—Ç–æ—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let frequencyData; // –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —á–∞—Å—Ç–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–≤—É–∫–∞
let adaptiveProcessor; // –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
// –§–ª–∞–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
let useAdaptiveSensitivity = false;

export function initPixiVisualizer() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PixiJS –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    stopPixiVisualizer();

    try {
        // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π canvas –¥–ª—è PixiJS
        const pixiCanvas = document.createElement('canvas');
        pixiCanvas.width = window.innerWidth;
        pixiCanvas.height = window.innerHeight - 100;
        pixiCanvas.style.position = 'fixed';
        pixiCanvas.style.top = '0';
        pixiCanvas.style.left = '0';
        pixiCanvas.style.zIndex = '1000';
        pixiCanvas.id = 'pixi-visualizer';
        document.body.appendChild(pixiCanvas);

        // –°–æ–∑–¥–∞–µ–º PixiJS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = new PIXI.Application({
            view: pixiCanvas, // v7: view –≤–º–µ—Å—Ç–æ canvas
            width: pixiCanvas.width,
            height: pixiCanvas.height,
            backgroundColor: 0x000000, // —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω
            antialias: true,
            backgroundAlpha: 1, // –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
            autoDensity: true,
            resolution: window.devicePixelRatio || 1, // –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏
        });

        console.log('PixiJS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
        console.log('Renderer:', app.renderer.type);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        const analyser = getAnalyser();
        if (!analyser) {
            console.error('–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return false;
        }

        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —á–∞—Å—Ç–æ—Ç
        const bufferLength = analyser.frequencyBinCount;
        frequencyData = new Uint8Array(bufferLength);
        console.log('–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω, bufferLength:', bufferLength);

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä—ã
        createSpotlights();
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞
        window.addEventListener('resize', handleResize);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        app.ticker.add(animate);
        console.log('–ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞');

        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PixiJS:', error);
        return false;
    }
}

// –¢–æ—á–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —á—É—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export function setAdaptiveSensitivity(enabled) {
    useAdaptiveSensitivity = enabled;

    if (enabled && !adaptiveProcessor) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∫–ª—é—á–µ–Ω–∏–∏
        adaptiveProcessor = new AdaptiveSensitivity(currentBands.bands.length, {
            targetPeak: 0.8,
            adaptationSpeed: 0.03,
            noiseFloor: 0.02,
            maxSensitivity: 3.0,
            minSensitivity: 0.2,
        });
        console.log('–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –í–ö–õ–Æ–ß–ï–ù–ê');
    } else if (!enabled && adaptiveProcessor) {
        adaptiveProcessor.reset();
        console.log('–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –í–´–ö–õ–Æ–ß–ï–ù–ê');
    }
}

function createSpotlights() {
    console.log('–°–æ–∑–¥–∞–µ–º –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä—ã —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏...');

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä—ã
    spotlights.forEach((spotlight) => spotlight.destroy());
    spotlights = [];

    // –ß–∏—Å–ª–æ —á–∞—Å—Ç–æ—Ç–Ω—ã—Ö –ø–æ–ª–æ—Å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    const totalBands = currentBands.bands.length;
    // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–∞–º–∏
    const gap = 20;
    // –†–∞—Å—á–µ—Ç —Ä–∞–¥–∏—É—Å–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
    const availableWidth = app.screen.width - gap * (totalBands - 1);
    const spotDiameter = availableWidth / totalBands;
    const spotRadius = spotDiameter / 2;
    const centerY = app.screen.height / 2; // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–∞

    // –¢–µ–º–Ω—ã–π —Ñ–æ–Ω
    createDarkBackground();

    // –û–±—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä—ã (–∫–æ–ª.–ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–æ–≤ = —á–∏—Å–ª—É –ø–æ–ª–æ—Å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è)
    currentBands.bands.forEach((band, index) => {
        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–∞
        const centerX = (spotDiameter + gap) * index + spotRadius;

        // –°–æ–∑–¥–∞–µ–º PIXI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–∞
        const spotlight = new PIXI.Container();
        spotlight.x = centerX;
        spotlight.y = centerY;
        spotlight.band = band;

        // ******* –°–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –º—ã—à—å—é *******
        spotlight.dragged = false; // –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        // –°–º–µ—â–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –∫–ª–∏–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–∞
        spotlight.offsetX = 0;
        spotlight.offsetY = 0;
        // –í–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞)
        spotlight.interactive = true;
        // –ö—É—Ä—Å–æ—Ä-—É–∫–∞–∑–∞—Ç–µ–ª—å –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        spotlight.buttonMode = true;
        // –û–±–ª–∞—Å—Ç—å –∫–ª–∏–∫–∞
        spotlight.hitArea = new PIXI.Circle(0, 0, spotRadius * 1.5);
        // ************************************************************

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–∞—Ö
        spotlight
            // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
            .on('mousedown', onSpotlightDragStart)
            // –ü—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –º—ã—à–∏ (–±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ)
            .on('mousemove', onSpotlightDragMove)
            // –ü—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
            .on('mouseup', onSpotlightDragEnd)
            // –ï—Å–ª–∏ –æ—Ç–ø—É—Å—Ç–∏–ª–∏ –≤–Ω–µ –æ–±—ä–µ–∫—Ç–∞
            .on('mouseupoutside', onSpotlightDragEnd);

        // *********** –í–µ—Ä—Å–∏—è —Å –æ–¥–Ω–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º *************
        // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        const gradientTexture = createGradientTexture(spotRadius, band.color);

        // 2. –°–æ–∑–¥–∞–µ–º PIXI Sprite —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º (—Ç–µ–ª–æ –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–∞)
        const gradientSprite = new PIXI.Sprite(gradientTexture);
        gradientSprite.anchor.set(0.5);
        gradientSprite.width = spotDiameter;
        gradientSprite.height = spotDiameter;

        // 3. –í–Ω–µ—à–Ω–µ–µ —Å–≤–µ—á–µ–Ω–∏–µ –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–∞
        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞
        const glowBlur = new PIXI.BlurFilter();
        glowBlur.blur = 100; //8;
        glowBlur.quality = 20; //4;
        glowBlur.repeatEdgePixels = false;

        // –¢–µ–ª–æ —Å–≤–µ—á–µ–Ω–∏—è
        const glow = new PIXI.Graphics();
        glow.beginFill(hexToNumber(band.color));
        glow.drawCircle(0, 0, spotRadius * 1.3);
        glow.endFill();
        glow.alpha = 0.3;
        glow.filters = [glowBlur];

        // 4. –¢–µ–∫—Å—Ç –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        const text = new PIXI.Text('', {
            fontFamily: 'Arial',
            fontSize: 14,
            fill: '#ffffff',
            align: 'center',
            fontWeight: 'bold',
        });
        text.anchor.set(0.5);
        text.y = spotRadius * 1.8;

        // 5. –°–æ–∑–¥–∞–µ–º –ª—É—á–∏ —Å–≤–µ—Ç–∞
        const rays = createLightRays(spotRadius, band.color);

        // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä
        spotlight.addChild(glow); // –í–Ω–µ—à–Ω–µ–µ —Å–≤–µ—á–µ–Ω–∏–µ
        spotlight.addChild(gradientSprite); // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—Ä–∞–π—Ç
        spotlight.addChild(rays); // –õ—É—á–∏
        spotlight.addChild(text); // –¢–µ–∫—Å—Ç

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
        spotlight.gradientSprite = gradientSprite;
        spotlight.glow = glow;
        spotlight.rays = rays;
        spotlight.text = text;

        // –ü–æ–º–µ—â–∞–µ–º –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä –Ω–∞ —Å—Ü–µ–Ω—É –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        app.stage.addChild(spotlight);
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä –≤ –º–∞—Å—Å–∏–≤ –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–æ–≤
        spotlights.push(spotlight);
    });

    console.log('–ü—Ä–æ–∂–µ–∫—Ç–æ—Ä—ã —Å —Ä–∞–¥–∏–∞–ª—å–Ω—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º —Å–æ–∑–¥–∞–Ω—ã');
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–¥–∏–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –∏–∑ canvas
function createGradientTexture(radius, color) {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
    const canvas = document.createElement('canvas');
    const size = radius * 2;
    canvas.width = size;
    canvas.height = size;
    const ctx = canvas.getContext('2d');

    // –°–æ–∑–¥–∞–µ–º —Ä–∞–¥–∏–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
    const gradient = ctx.createRadialGradient(
        radius,
        radius,
        0, // –ù–∞—á–∞–ª—å–Ω—ã–π –∫—Ä—É–≥ (—Ü–µ–Ω—Ç—Ä)
        radius,
        radius,
        radius // –ö–æ–Ω–µ—á–Ω—ã–π –∫—Ä—É–≥ (–∫—Ä–∞–π)
    );

    const hexColor = color.replace('#', '');
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–∞–≤–Ω—É—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ç–µ–ª–∞ –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–∞
    gradient.addColorStop(0, `#${hexColor}FF`); // —Ü–µ–Ω—Ç—Ä: –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
    gradient.addColorStop(0.1, `#${hexColor}FF`); // 10%: –≤—Å–µ –µ—â–µ –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
    gradient.addColorStop(0.2, `#${hexColor}EE`); // 20%: –ø–æ—á—Ç–∏ –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
    gradient.addColorStop(0.4, `#${hexColor}AA`); // 40%: —Ö–æ—Ä–æ—à–æ –≤–∏–¥–∏–º—ã–π
    gradient.addColorStop(0.7, `#${hexColor}55`); // 70%: –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
    gradient.addColorStop(0.9, `#${hexColor}22`); // 90%: –ø–æ—á—Ç–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
    gradient.addColorStop(1, `#${hexColor}00`); // –∫—Ä–∞–π: –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π

    // –†–∏—Å—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, size, size);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∏–∑ canvas
    return PIXI.Texture.from(canvas);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ª—É—á–µ–π
function createLightRays(radius, color) {
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª—É—á–µ–π
    const raysContainer = new PIXI.Container();

    // –û–±—Ö–æ–¥–∏–º –≤—Å–µ –ª—É—á–∏
    for (let i = 0; i < 12; i++) {
        const angle = (i / 12) * Math.PI * 2;

        const ray = new PIXI.Graphics();
        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞
        const rayBlur = new PIXI.BlurFilter();
        rayBlur.blur = 8;
        rayBlur.quality = 4;
        rayBlur.repeatEdgePixels = false;

        // –†–∏—Å—É–µ–º –ª—É—á
        ray.beginFill(hexToNumber(color));
        ray.moveTo(0, 0);
        ray.lineTo(
            Math.cos(angle) * radius * 0.5,
            Math.sin(angle) * radius * 0.5
        );
        ray.lineTo(
            Math.cos(angle + 0.15) * radius * 2.0,
            Math.sin(angle + 0.15) * radius * 2.0
        );
        ray.lineTo(
            Math.cos(angle - 0.15) * radius * 2.0,
            Math.sin(angle - 0.15) * radius * 2.0
        );
        ray.closePath();
        ray.endFill();

        ray.alpha = 0.2;
        ray.filters = [rayBlur];
        // –î–æ–±–∞–≤–ª—è–µ–º –ª—É—á –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ª—É—á–µ–π
        raysContainer.addChild(ray);
    }

    return raysContainer;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–∞ —ç–∫—Ä–∞–Ω–∞
function createDarkBackground() {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ–Ω
    const oldBackground = app.stage.getChildByName('background');
    if (oldBackground) oldBackground.destroy();

    // –¢–µ–º–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
    const background = new PIXI.Graphics();
    background.name = 'background';

    // –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —á–µ—Ä–Ω–æ–≥–æ –∫ —Ç–µ–º–Ω–æ-—Å–∏–Ω–µ–º—É
    background.beginFill(0x000011);
    background.drawRect(0, 0, app.screen.width, app.screen.height);
    background.endFill();

    app.stage.addChildAt(background, 0);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
function onSpotlightDragStart(event) {
    const spotlight = event.currentTarget;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–∞
    spotlight.offsetX = event.data.global.x - spotlight.x;
    spotlight.offsetY = event.data.global.y - spotlight.y;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    spotlight.dragged = true;

    // –ü–æ–¥–Ω–∏–º–∞–µ–º –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä –Ω–∞–≤–µ—Ä—Ö (—á—Ç–æ–±—ã –±—ã–ª –ø–æ–≤–µ—Ä—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö)
    app.stage.removeChild(spotlight);
    app.stage.addChild(spotlight);

    // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç - —É–º–µ–Ω—å—à–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
    spotlight.alpha = 0.8;

    console.log(`–ù–∞—á–∞–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä "${spotlight.band.name}"`);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º—ã—à–∏ (—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –∑–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ)
function onSpotlightDragMove(event) {
    const spotlight = event.currentTarget;

    if (!spotlight.dragged) return; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ—Å—Ç—å

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è
    spotlight.x = event.data.global.x - spotlight.offsetX;
    spotlight.y = event.data.global.y - spotlight.offsetY;

    console.log(
        `–ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä "${spotlight.band.name}": ${spotlight.x.toFixed(
            0
        )}, ${spotlight.y.toFixed(0)}`
    );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
function onSpotlightDragEnd(event) {
    const spotlight = event.currentTarget;

    if (!spotlight.dragged) return;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    spotlight.dragged = false;
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
    spotlight.alpha = 1.0;

    console.log(`–ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–∞ "${spotlight.band.name}"`);
}

// –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–æ–≤
function animate() {
    const analyser = getAnalyser();
    if (!analyser || !frequencyData) return;

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Å—Å–∏–≤ —á–∞—Å—Ç–æ—Ç –∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—É
    analyser.getByteFrequencyData(frequencyData);

    // –û–±—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä—ã
    spotlights.forEach((spotlight, index) => {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–≤–µ—á–µ–Ω–∏—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        const intensity = getBandIntensity(spotlight.band.range);

        // –ù–µ–ª–∏–Ω–µ–π–Ω–∞—è —à–∫–∞–ª–∞ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —Å–≤–µ—á–µ–Ω–∏—è –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–∞
        let glowIntensity;
        if (intensity <= 0.5) {
            // 1. –¥–æ 50% –≥—Ä–æ–º–∫–æ—Å—Ç–∏ - –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            glowIntensity = intensity;
        } else if (intensity <= 0.8) {
            // 2. –æ—Ç 50% –¥–æ 80% - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.3
            glowIntensity = 0.5 + (intensity - 0.5) * 1.3;
        } else {
            // 3. –æ—Ç 80% –¥–æ 100% - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.6
            glowIntensity = 0.5 + 0.3 * 1.3 + (intensity - 0.8) * 1.6;
        }

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        glowIntensity = Math.min(glowIntensity, 1.0);

        // –û–°–ù–û–í–ù–û–ô –ú–ê–°–®–¢–ê–ë (–¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Å–ø—Ä–∞–π—Ç–∞)
        const baseScale = 0.8 + intensity * 0.6;

        // –ê–ù–ò–ú–ê–¶–ò–Ø –ì–†–ê–î–ò–ï–ù–¢–ù–û–ì–û –°–ü–†–ê–ô–¢–ê
        spotlight.gradientSprite.scale.set(baseScale);

        // –ê–ù–ò–ú–ê–¶–ò–Ø –í–ù–ï–®–ù–ï–ì–û –°–í–ï–ß–ï–ù–ò–Ø –° –ù–ï–õ–ò–ù–ï–ô–ù–û–ô –®–ö–ê–õ–û–ô
        const glowScale = 0.9 + glowIntensity * 0.8; // –ë–æ–ª—å—à–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Å–≤–µ—á–µ–Ω–∏—è
        spotlight.glow.scale.set(glowScale);
        spotlight.glow.alpha = 0.15 + glowIntensity * 0.5; // –Ø—Ä—á–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏

        // –ê–ù–ò–ú–ê–¶–ò–Ø –õ–£–ß–ï–ô
        spotlight.rays.rotation += 0.005 * intensity;
        const raysIntensity = intensity > 0.7 ? glowIntensity : intensity * 0.7;
        spotlight.rays.alpha = 0.1 + raysIntensity * 0.3;
        spotlight.rays.scale.set(0.9 + intensity * 0.4);

        // –¢–ï–ö–°–¢
        const percent = Math.round(intensity * 100);
        spotlight.text.text = `${spotlight.band.name} ${percent}%`;
        spotlight.text.style.fill = intensity > 0.8 ? '#ffff00' : '#ffffff';
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
function getBandIntensity([lowFreq, highFreq]) {
    const analyser = getAnalyser();
    if (!analyser || !frequencyData) return 0;

    const sampleRate = analyser.context.sampleRate;
    const dataLength = frequencyData.length;

    const startIndex = Math.floor((lowFreq / sampleRate) * dataLength * 2);
    const endIndex = Math.floor((highFreq / sampleRate) * dataLength * 2);

    let sum = 0;
    let count = 0;

    for (let i = startIndex; i < endIndex && i < dataLength; i++) {
        sum += frequencyData[i];
        count++;
    }

    const rawIntensity = count > 0 ? sum / count / 255 : 0;

    // –ï–î–ò–ù–û–ï –ú–ï–°–¢–û –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –õ–û–ì–ò–ö–ò –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    if (useAdaptiveSensitivity && adaptiveProcessor) {
        // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        const bandIndex = currentBands.bands.findIndex(
            (b) => b.range[0] === lowFreq && b.range[1] === highFreq
        );
        if (bandIndex !== -1) {
            // –ü–†–ò–ú–ï–ù–Ø–ï–ú –ü–†–û–§–ò–õ–¨ –ö –°–´–†–û–ú–£ –°–ò–ì–ù–ê–õ–£
            const band = currentBands.bands[bandIndex];
            const profileAdjusted = rawIntensity * band.sensitivity;

            // –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –ö–û–†–†–ï–ö–¶–ò–Ø –ü–û–í–ï–†–• –ü–†–û–§–ò–õ–Ø
            const adjustedIntensities = adaptiveProcessor.processFrame([
                profileAdjusted,
            ]);
            return adjustedIntensities[0];
        }
    } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞, —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–∏–ª—å)
        const band = currentBands.bands.find(
            (b) => b.range[0] === lowFreq && b.range[1] === highFreq
        );
        const sensitivity = band ? band.sensitivity : 1;

        return Math.min(rawIntensity * sensitivity, 1);
    }

    return rawIntensity; // fallback
}

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–≤–µ—Ç–æ–º –≤ PIXI
function hexToNumber(hex) {
    return parseInt(hex.replace('#', '0x'));
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
export function stopPixiVisualizer() {
    console.log('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PixiJS –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä...');

    if (app) {
        app.ticker.stop();
        app.destroy(true);
        app = null;
        console.log('PixiJS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }

    const pixiCanvas = document.getElementById('pixi-visualizer');
    if (pixiCanvas) {
        pixiCanvas.remove();
        console.log('Canvas —É–¥–∞–ª–µ–Ω');
    }

    // –°–ë–†–ê–°–´–í–ê–ï–ú –ê–î–ê–ü–¢–ò–í–ù–´–ô –ü–†–û–¶–ï–°–°–û–† (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)
    if (adaptiveProcessor) {
        adaptiveProcessor.reset();
    }

    // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    spotlights = [];
    frequencyData = null;
    console.log('PixiJS –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
}

// –°–º–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
export function setPixiProfile(profileName) {
    console.log('–ú–µ–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞:', profileName);
    currentBands = PROFILES[profileName] || PROFILES.DEFAULT;
    if (app) {
        createSpotlights();
    }
}

// –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞
function handleResize() {
    if (!app) return;

    const pixiCanvas = document.getElementById('pixi-visualizer');
    if (!pixiCanvas) return;

    // –°–û–•–†–ê–ù–Ø–ï–ú –¢–ï–ö–£–©–ò–ï –ü–û–ó–ò–¶–ò–ò –∏ –†–ê–ó–ú–ï–†–´ –ü–†–û–ñ–ï–ö–¢–û–†–û–í
    const oldWidth = app.screen.width;
    const oldHeight = app.screen.height;
    const savedPositions = spotlights.map((spotlight) => ({
        band: spotlight.band,
        x: spotlight.x,
        y: spotlight.y,
        dragged: spotlight.dragged, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    }));

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
    pixiCanvas.width = window.innerWidth;
    pixiCanvas.height = window.innerHeight - 100;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä PixiJS
    app.renderer.resize(pixiCanvas.width, pixiCanvas.height);

    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä—ã —Å –Ω–æ–≤—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    createSpotlights();

    // –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú –ü–û–ó–ò–¶–ò–ò –ü–†–û–ü–û–†–¶–ò–û–ù–ê–õ–¨–ù–û
    const scaleX = app.screen.width / oldWidth;
    const scaleY = app.screen.height / oldHeight;
    // –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ü–û–ó–ò–¶–ò–ò
    savedPositions.forEach((savedPos, index) => {
        if (index < spotlights.length) {
            spotlights[index].x = savedPos.x * scaleX;
            spotlights[index].y = savedPos.y * scaleY;
            spotlights[index].dragged = savedPos.dragged;
        }
    });

    console.log('PixiJS canvas resized:', pixiCanvas.width, pixiCanvas.height);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.pixiVisualizer = {
    init: initPixiVisualizer,
    stop: stopPixiVisualizer,
    setProfile: setPixiProfile,
    setAdaptiveSensitivity: setAdaptiveSensitivity, // ‚Üê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
    getSpotlights: () => spotlights,
    getApp: () => app,
    getAdaptiveState: () => ({
        enabled: useAdaptiveSensitivity,
        processor: adaptiveProcessor,
    }),
};

/*
–î–ª—è UI –ø–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å setAdaptiveSensitivity(true/false)
- –≤—Å—è –ª–æ–≥–∏–∫–∞ –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä–æ–≤–∞–Ω–∞!
*/
/*
–ò—Ç–æ–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö:
–°—ã—Ä–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å ‚Üí –£—Å–ª–æ–≤–∏–µ ‚Üí –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è/–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚Üí –†–µ–∑—É–ª—å—Ç–∞—Ç
*/
