import {
    loadAudioFile,
    loadAudioFromUrl,
    playAudio,
    pauseAudio,
    getIsPlaying,
} from './audioManager.js';
import { validateAudioFile } from './audioValidator.js';
import {
    initPixiVisualizer,
    stopPixiVisualizer,
    setPixiProfile,
    setAdaptiveSensitivity,
} from './pixiVisualizer.js';

// –ü–æ–ª—É—á–∞–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const fileButton = document.querySelector('.file-button');
const fileInput = document.getElementById('audioFile');
const playButton = document.querySelector('.btnPlay');
const pauseButton = document.querySelector('.btnPause');
const canvas = document.getElementById('canvas');
const adaptiveToggle = document.getElementById('adaptiveToggle');
const profileSelect = document.getElementById('profileSelect');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è "Auto Sense"
adaptiveToggle.addEventListener('change', (e) => {
    const enabled = e.target.checked;
    setAdaptiveSensitivity(enabled);

    // –î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
    console.log(`–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${enabled ? '–í–ö–õ' : '–í–´–ö–õ'}`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–≤—É–∫–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
profileSelect.addEventListener('change', (e) => {
    const profileName = e.target.value;
    setPixiProfile(profileName);

    // –î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
    console.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: ${profileName}`);
});

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Canvas
function setupCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight - 100; // –º–∏–Ω—É—Å –º–µ—Å—Ç–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    console.log('setup canvas run');
}

// –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ —Ä–µ—Å–∞–π–∑–µ –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞
window.addEventListener('resize', setupCanvas);
setupCanvas();

//------------------------------------------------
// –ò –¥–ª—è touch
fileButton.addEventListener('touchend', (e) => {
    alert('TV touch');
    e.preventDefault();
});

//------------------------------------------------

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ (–∫–Ω–æ–ø–∫–∞ "Choose Audio File")
fileInput.addEventListener('change', async (event) => {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è
    const file = event.target.files[0];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ file –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—É
    const validation = validateAudioFile(file);
    if (!validation.isValid) {
        alert(validation.error);
        fileInput.value = '';
        return;
    }

    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ –∫–Ω–æ–ø–∫–µ
        fileButton.textContent = 'Loading...';
        fileButton.disabled = true;
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...');

        // –í—ã–∑–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
        await loadAudioFile(file);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ –∫–Ω–æ–ø–∫–µ "Choose Audio File"
        fileButton.classList.add('has-file'); // —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ input
        // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        const fileName =
            file.name.length > 20
                ? file.name.substring(0, 17) + '...'
                : file.name;
        fileButton.textContent = fileName;
        console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä (–ø–æ–∫–∞ –ø–æ—Ç—É—Ö—à–∏–µ –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä—ã) !!!
        initPixiVisualizer();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
        fileButton.classList.remove('has-file'); // —É–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞ input
        fileButton.textContent = 'Choose Audio File';
    } finally {
        // –í—Å–µ–≥–¥–∞ —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        fileButton.disabled = false;
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "Play"
playButton.addEventListener('click', async () => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ, –µ—Å–ª–∏ —É–∂–µ –∏–≥—Ä–∞–µ—Ç —Ñ–∞–π–ª
    if (getIsPlaying()) {
        // –ú–∏–≥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        playButton.style.opacity = '0.5';
        setTimeout(() => {
            playButton.style.opacity = '1';
        }, 200);
        return;
    }

    try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
        await playAudio();
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä (–ø–æ—à–ª–∞ –¥–∏–Ω–∞–º–∏–∫–∞) !!!
        initPixiVisualizer();
    } catch (error) {
        // –ï—Å–ª–∏ –∞—É–¥–∏–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–∫
        if (
            error.message.includes('load') ||
            error.message.includes('source')
        ) {
            alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ —Ç—Ä–µ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ');
        } else {
            alert(error.message);
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "Pause"
pauseButton.addEventListener('click', () => {
    // –ë–µ–∑ try/catch - –ø–æ—Ç–æ–º—É —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è (–Ω–µ –±—Ä–æ—Å–∞–µ—Ç –æ—à–∏–±–∫–∏)
    // –ë–µ–∑ await - –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–∞—É–∑–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
    pauseAudio();
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    stopPixiVisualizer();
});

// –ü–∞—É–∑–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (—ç–∫–æ–Ω–æ–º–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤)
document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
        pauseAudio();
        stopPixiVisualizer();
    }
});

// –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');

//--------------------------------------
// –î–µ–º–æ-—Ç—Ä–µ–∫–∏ —Å –ø—Ä—è–º—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
const DEMO_TRACKS = [
    {
        name: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –º—É–∑—ã–∫–∞ (–±–∏—Ç)',
        url: 'https://dw2.hitmos.fm/L21wMy83MzMzMjY4L05laWtlZCwgUG9ydHVnYWwuIFRoZSBNYW4gLSBHbGlkZSAoaGl0bW9zLmZtKS5tcDM=.mp3',
        description: '–†–∏—Ç–º–∏—á–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏—Ç',
    },
    {
        name: '–î–∂–∞–∑–æ–≤—ã–π —Å–∞–∫—Å–æ—Ñ–æ–Ω',
        url: 'https://dw2.hitmos.fm/L21wMy84MDk0ODQxL0F2YSBNYXggLSBEb24ndCBDbGljayBQbGF5IChoaXRtb3MuZm0pLm1wMw==.mp3',
        description: '–ú—è–≥–∫–∏–π –¥–∂–∞–∑–æ–≤—ã–π —Å–∞—É–Ω–¥',
    },
    {
        nmae: '–®–∞–Ω—Å–æ–Ω',
        url: 'https://s2dw.pesni.fm/L3RyYWNrLzE5MzEyNzE3L01hZ2FzIC0g0KHQvtGI0LXQuyDRgSDRg9C80LAgKHBlc25pLmZtKS5tcDM=.mp3',
        description: '–ú—è–≥–∫–∏–π –¥–∂–∞–∑–æ–≤—ã–π —Å–∞—É–Ω–¥',
    },
];

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–æ–≤
function createTrackSelector() {
    const selector = document.createElement('div');
    selector.className = 'track-selector';
    selector.innerHTML = `
        <div style="background: rgba(0,0,0,0.8); padding: 20px; border-radius: 10px; margin: 20px 0;">
            <h3 style="color: white; margin-bottom: 15px;">üéµ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–º–æ-—Ç—Ä–µ–∫</h3>
            <div id="demoTracksList" style="display: flex; flex-direction: column; gap: 10px;">
                ${DEMO_TRACKS.map(
                    (track, index) => `
                    <button class="demo-track-btn" 
                            data-url="${track.url}"
                            data-name="${track.name}"
                            style="padding: 12px; background: #333; color: white; border: 1px solid #555; border-radius: 5px; text-align: left;">
                        <strong>${track.name}</strong>
                        <br><small style="opacity: 0.7;">${track.description}</small>
                    </button>
                `
                ).join('')}
            </div>
            <div style="margin-top: 15px; padding-top: 15px; border-top: 1px solid #555;">
                <h4 style="color: white; margin-bottom: 10px;">üîó –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—Å—ã–ª–∫—É</h4>
                <input type="text" id="customUrl" placeholder="https://example.com/audio.mp3" 
                       style="width: 100%; padding: 10px; margin-bottom: 10px; border-radius: 5px;">
                <button id="loadCustomUrl" style="padding: 10px 20px; background: #4CAF50; color: white; border: none; border-radius: 5px;">
                    –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ
                </button>
            </div>
        </div>
    `;

    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const controls = document.querySelector('.file-button').parentNode;
    controls.parentNode.insertBefore(selector, controls);

    setupTrackSelectorEvents();
}

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function setupTrackSelectorEvents() {
    // –ö–Ω–æ–ø–∫–∏ –¥–µ–º–æ-—Ç—Ä–µ–∫–æ–≤
    document.querySelectorAll('.demo-track-btn').forEach((btn) => {
        btn.addEventListener('click', async () => {
            const url = btn.dataset.url;
            const name = btn.dataset.name;
            await loadTrackFromUrl(url, name);
        });

        // –î–ª—è TV –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ–æ–∫—É—Å–∞
        btn.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                btn.click();
            }
        });
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Å—ã–ª–∫–µ
    document
        .getElementById('loadCustomUrl')
        .addEventListener('click', async () => {
            const url = document.getElementById('customUrl').value.trim();
            if (!url) {
                alert('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª');
                return;
            }

            if (!url.startsWith('http')) {
                alert('–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://');
                return;
            }

            await loadTrackFromUrl(url, 'Custom Track');
        });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ –ø–æ URL
async function loadTrackFromUrl(url, trackName) {
    try {
        fileButton.textContent = 'Loading...';
        fileButton.disabled = true;

        console.log('Loading track:', trackName, url);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –ø–æ URL
        await loadAudioFromUrl(url, trackName);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        fileButton.classList.add('has-file');
        fileButton.textContent =
            trackName.length > 20
                ? trackName.substring(0, 17) + '...'
                : trackName;

        console.log('Track loaded successfully');

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        setTimeout(() => {
            initPixiVisualizer();
        }, 500);
    } catch (error) {
        console.error('Error loading track:', error);
        fileButton.classList.remove('has-file');
        fileButton.textContent = 'Choose Audio File';
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message);
    } finally {
        fileButton.disabled = false;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    createTrackSelector();

    // –°–∫—Ä—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π file input –Ω–∞ TV
    if (/TV|Android.*TV/i.test(navigator.userAgent)) {
        fileInput.style.display = 'none';
        fileButton.style.display = 'none'; // –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ fallback
    }
});
// ----------------------------------------------------------
